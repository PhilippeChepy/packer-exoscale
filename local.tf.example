locals {
  platform_name        = "my-own-paas"
  platform_zone        = "de-fra-1"
  platform_backup_zone = "de-muc-1"

  # Defaults to the public IP of the device running terraform apply in `terraform-base`.
  # This calls ipconfig.me to automatically detect this public IP address.
  platform_admin_networks = "auto"

  # For more privacy, manually set the allowed list of public IPs:
  # platform_admin_networks = [
  #   "a.b.c.d/32"
  # ]  

  # For development purposes (not recommended as this open administration services to the world)
  # platform_admin_networks = [
  #   "0.0.0.0/0",
  #   "::/0"
  # ]

  # Set your infrastructure domain here
  platform_domain = "${local.platform_name}.domain.tld"

  # TODO/WIP: authentication management
  # Set your authentication settings here.
  # Possible provider is only "vault" for now.
  #
  # If provider is "vault", you can set your users and their groups here.
  # In this case, possible groups are "administrator", "developer" or both.
  platform_authentication = {
    provider = "vault"
    users = {
      "lucy.l" = {
        groups = ["administrator"]
      }
      "lucas.c" = {
        groups = ["developer"]
      }
    }
  }

  platform_components = {
    vault = {
      endpoint = "vault.${local.platform_domain}"
      # Set the template id returned by packer when building the vault template (from exoscale-vault.pkr.hcl)
      template = "<vault-template-id>"
    }
    kubernetes = {
      endpoint = "apiserver.kubernetes.${local.platform_domain}"
      templates = {
        # Set the template id returned by packer when building the etcd template (from exoscale-etcd.pkr.hcl)
        etcd          = "<etcd-template-id>"
        # Set the template id returned by packer when building the kubernetes control plane template (from exoscale-kube-controlplane.pkr.hcl)
        control_plane = "<kubernetes-control-plane-template-id>"
        # Set the template id returned by packer when building the kubelet template (from exoscale-kube-node.pkr.hcl)
        kubelet       = "<kubernetes-node-template-id>"
      }
      # cluster settings
      cluster_domain         = "kubernetes.${local.platform_domain}"
      pod_cidr_ipv4          = "10.96.0.0/12"
      service_cidr_ipv4      = "10.80.0.0/12"
      apiserver_service_ipv4 = "10.80.0.1"
      dns_service_ipv4       = "10.80.0.2"

      pod_cidr_ipv6          = "fc00::2:0/112"
      service_cidr_ipv6      = "fc00::1:0/112"
      apiserver_service_ipv6 = "fc00::1:1"
      dns_service_ipv6       = "fc00::1:2"

      deployments = {
        bootstrap = {
          cert-manager       = { version = "1.9.1", namespace = "cert-manager" }
          cilium-base        = { version = "1.12.0", namespace = "kube-system" }
          core-dns           = { version = "1.9.3", namespace = "kube-system" }
          konnectivity-agent = { version = "0.0.32", namespace = "kube-system" }
          kyverno            = { version = "1.7.2", namespace = "kyverno" }
        }

        core = {
          certificate-metrics-server = { version = "0.0.1", namespace = "kube-system" } # requires "core.cert-manager"
          metrics-server             = { version = "0.6.1", namespace = "kube-system" } # requires "certificate-metrics-server" or another aggregation certificate provisioning mean 
          reloader             = { version = "0.0.118", namespace = "reloader" }
          vault-agent-injector = { version = "0.17.0", namespace = "vault-agent-injector" }
        }

        # Unless explicitely specified (e.g. cert-manager), these deployments are put in
        # an ingress-specific namespace
        ingress = {
          nginx-ingress-controller          = { version = "1.3.0" }
          cert-manager-clusterissuer-http01 = { version = "0.0.1" }
        }

        ingress-cloudflare = {
          cert-manager-dns01-cloudflare = { version = "0.0.1", namespace = "cert-manager" }
          external-dns-cloudflare       = { version = "0.12.2" }
          # This certificate requires:
          # - A DNS01 issuer (e.g. "cert-manager-dns01-cloudflare") deployed and configured for this ingress
          # - A specific domain set in ingress.*.domain (see next section)
          certificate-wildcard-letsencrypt = { version = "0.0.1" }
        }

      }

      # Define your ingress pools here
      ingresses = {
        default = {
          label     = "platform.example.tld/ingress=default",
          pool_size = 2
          deployments = [
            "cert-manager-clusterissuer-http01",
            "nginx-ingress-controller"
          ]
        }
        internal = {
          label     = "platform.example.tld/ingress=internal",
          pool_size = 2,
          domain    = "internal.example.tld"
          deployments = [
            "cert-manager-clusterissuer-http01",
            "nginx-ingress-controller"
          ]
          deployments-cloudflare = [
            "cert-manager-dns01-cloudflare",
            "external-dns-cloudflare",
            "certificate-wildcard-letsencrypt",
          ]
        }
      }
    }
  }

  platform_ssh_algorithm = {
    # Key Algorithm (e.g. 'RSA', 'ECDSA' or 'ED25519'), with 'ED25519' as the default.
    algorithm = "ED25519"

    # May be any of 'P224', 'P256', 'P384' or 'P521', with 'P224' as the default.    
    # ecdsa_curve = "P521"

    # Defaults to '4096' bits.
    # rsa_bits = 4096
  }

  platform_default_tls_algorithm = {
    # Key Algorithm (e.g. 'RSA', 'ECDSA' or 'ED25519'), with 'ED25519' as the default.
    algorithm = "RSA"

    # May be any of 'P224', 'P256', 'P384' or 'P521', with 'P224' as the default.    
    # ecdsa_curve = "P521"

    # Defaults to '4096' bits.
    rsa_bits = 4096
  }

  platform_default_tls_ttl = {
    ca   = 262800 # 30y
    ica  = 87600  # 10y
    cert = 96     # 4d
  }

  # Set your organization details here
  platform_default_tls_subject = {
    organizational_unit = "Internal PaaS"
    organization        = "Organization"
    street_address      = ["Street Address"]
    postal_code         = "postal code"
    locality            = "Locality"
    province            = "Province"
    country             = "Country"
  }
}
