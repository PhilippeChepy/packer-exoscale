---
apiVersion: cilium.io/v2
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: deny-all
spec:
  endpointSelector: {}
  ingress:
    - {}
  egress:
    - {}
---
apiVersion: cilium.io/v2
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-egress-internal-dns
spec:
  endpointSelector: {}
  ingress:
    - {}
  egress:
    - toEndpoints:
        - matchLabels:
            io.kubernetes.pod.namespace: kube-system
            k8s-app: coredns
      toPorts:
        - ports:
            - port: "53"
              protocol: UDP
          rules:
            dns:
              - matchPattern: "*"
---
apiVersion: cilium.io/v2
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-egress-dns
spec:
  endpointSelector: {}
  ingress:
    - fromEndpoints:
        - matchLabels:
            rule.${platform_domain}/allow-egress-dns: "true"
  egress:
    - toEntities:
        - world
      toPorts:
        - ports:
            - port: "53"
              protocol: UDP
          rules:
            dns:
              - matchPattern: "*"
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-egress-api-server
spec:
  endpointSelector: {}
  ingress:
    - fromEndpoints:
        - matchLabels:
            rule.${platform_domain}/allow-egress-api-server: "true"
  egress:
    - toServices:
        - k8sService:
            serviceName: kubernetes
            namespace: default
      toPorts:
        - ports:
            - port: "443"
              protocol: TCP
    - toEntities:
      - kube-apiserver
      toPorts:
        - ports:
            - port: "6443"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-egress-konnectivity-server
spec:
  endpointSelector: {}
  ingress:
    - fromEndpoints:
        - matchLabels:
            rule.${platform_domain}/allow-egress-konnectivity-server: "true"
  egress:
    - toEntities:
      - kube-apiserver
      toPorts:
        - ports:
            - port: "8091"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-egress-kubelet
spec:
  endpointSelector: {}
  ingress:
    - fromEndpoints:
        - matchLabels:
            rule.${platform_domain}/allow-egress-kubelet: "true"
  egress:
    - toEntities:
      - remote-node
      - host
      toPorts:
        - ports:
            - port: "10250"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-egress-vault
spec:
  endpointSelector: {}
  ingress:
    - fromEndpoints:
        - matchLabels:
            rule.${platform_domain}/allow-egress-vault: "true"
  egress:
    - toCIDR:
      - ${vault_cluster_ipv4}/32
      toPorts:
        - ports:
            - port: "8200"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-egress-dex
spec:
  endpointSelector: {}
  ingress:
    - fromEndpoints:
        - matchLabels:
            rule.${platform_domain}/allow-egress-dex: "true"
  egress:
    - toCIDR:
      - 89.145.160.97/32
      toPorts:
        - ports:
            - port: "443"
              protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-ingress-api-server
spec:
  endpointSelector: {}
  ingress:
    - fromEndpoints:
        - matchLabels:
            k8s-app: konnectivity-agent
            io.kubernetes.pod.namespace: kube-system
  egress:
    - toEndpoints:
        - matchLabels:
            rule.${platform_domain}/allow-ingress-api-server: "true"
---
apiVersion: cilium.io/v2
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: allow-cilium-healthcheck
spec:
  endpointSelector: {}
  ingress:
    - fromEntities:
      - remote-node
  egress:
    - toPorts:
        - ports:
            - port: "4240"
              protocol: TCP
