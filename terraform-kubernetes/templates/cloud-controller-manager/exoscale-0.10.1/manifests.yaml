---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exoscale-cloud-controller-manager
  namespace: cloud-controller-manager
  labels:
    app: exoscale-cloud-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: exoscale-cloud-controller-manager
  template:
    metadata:
      labels:
        app: exoscale-cloud-controller-manager
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "cloud-controller-manager"

        vault.hashicorp.com/agent-inject-secret-iam.env: "iam/exoscale/apikey/cloud-controller-manager"
        vault.hashicorp.com/agent-inject-template-iam.env: |
          {{- with secret "iam/exoscale/apikey/cloud-controller-manager" -}}
          {{ .Data | toJSON }}
          {{- end }}

        vault.hashicorp.com/agent-revoke-on-shutdown: "true"
        vault.hashicorp.com/agent-limits-cpu: "50m"
        vault.hashicorp.com/agent-requests-cpu: "50m"
        vault.hashicorp.com/tls-secret: "vault-sidecar-tls"
        vault.hashicorp.com/ca-cert: "/vault/tls/ca.pem"
        vault.hashicorp.com/log-level: "debug"
    spec:
      dnsPolicy: Default
      hostNetwork: true
      serviceAccountName: cloud-controller-manager
      tolerations:
        - key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
          effect: NoSchedule
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      containers:
      - image: exoscale/cloud-controller-manager:0.10.1
        imagePullPolicy: Always
        name: exoscale-cloud-controller-manager
        args:
          - --cloud-provider=exoscale
          - --leader-elect=true
          - --allow-untagged-cloud
        env:
          - name: EXOSCALE_API_CREDENTIALS_FILE
            value: /vault/secrets/iam.env
          - name: EXOSCALE_ZONE
            value: $provider:zone$
          - name: EXOSCALE_SKS_AGENT_RUNNERS
            value: node-csr-validation
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: cloud-controller-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: system:cloud-controller-manager
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - 'get'
  - 'watch'
  - 'list'
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - update
- apiGroups:
  - certificates.k8s.io
  resources:
  - signers
  resourceNames:
  - kubernetes.io/kubelet-serving
  verbs:
  - approve
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - get
  - list
  - watch
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:cloud-controller-manager
subjects:
- kind: ServiceAccount
  name: cloud-controller-manager
  namespace: cloud-controller-manager
---
apiVersion: v1
kind: Secret
metadata:
  name: vault-sidecar-tls
type: Opaque
data:
  ca.pem: $vault:cluster_ca_cert$
