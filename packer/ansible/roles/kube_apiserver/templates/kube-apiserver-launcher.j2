#!/bin/bash

# Exit on missing certificates

if [ ! -f {{ kube_apiserver_config_path }}/aggregation-layer-ca.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/aggregation-layer.key ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/aggregation-layer.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/etcd-ca.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/etcd.key ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/etcd.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/kubelet-ca.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/kubelet-client.key ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/kubelet-client.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/server-ca.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/server.key ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/server.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/service-account-key.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/konnectivity-client.pem ]; then exit 0; fi
if [ ! -f {{ kube_apiserver_config_path }}/konnectivity-client.key ]; then exit 0; fi

# Build egress selector configuration for Konnectivity

PUBLIC_IP=$(jq -r '.ds.meta_data."public-ipv4"' /run/cloud-init/instance-data.json)

cat > "{{ kube_apiserver_config_path }}/egress-selector-configuration.yaml" <<EOF
apiVersion: apiserver.k8s.io/v1beta1
kind: EgressSelectorConfiguration
metadata:
  name: egress-selector-configuration-cluster
egressSelections:
- name: cluster
  connection:
    proxyProtocol: HTTPConnect
    transport:
      tcp:
        url: https://${PUBLIC_IP}:8090
        tlsConfig:
          caBundle: {{ kube_apiserver_config_path }}/server-ca.pem
          clientCert: {{ kube_apiserver_config_path }}/konnectivity-client.pem
          clientKey: {{ kube_apiserver_config_path }}/konnectivity-client.key
EOF

# Launch apiserver

{{ kube_apiserver_bin_path }}/kube-apiserver \
  --advertise-address="$KUBE_APISERVER_ADVERTISE_ADDRESS" \
  --allow-privileged \
  --authorization-mode=Node,RBAC \
  --bind-address=0.0.0.0 \
  --client-ca-file={{ kube_apiserver_config_path }}/server-ca.pem \
  --enable-bootstrap-token-auth=true \
  --etcd-cafile={{ kube_apiserver_config_path }}/etcd-ca.pem \
  --etcd-certfile={{ kube_apiserver_config_path }}/etcd.pem \
  --etcd-compaction-interval=0 \
  --etcd-keyfile={{ kube_apiserver_config_path }}/etcd.key \
  --etcd-prefix=/kubernetes \
  --etcd-servers="$KUBE_APISERVER_ETCD_SERVERS" \
  --egress-selector-config-file={{ kube_apiserver_config_path }}/egress-selector-configuration.yaml \
  --encryption-provider-config={{ kube_apiserver_config_path }}/encryption-configuration.yaml \
  --kubelet-certificate-authority={{ kube_apiserver_config_path }}/kubelet-ca.pem \
  --kubelet-client-certificate={{ kube_apiserver_config_path }}/kubelet-client.pem \
  --kubelet-client-key={{ kube_apiserver_config_path }}/kubelet-client.key \
  --kubelet-preferred-address-types=InternalIP,ExternalIP \
  --profiling=false \
  --service-account-issuer="$KUBE_APISERVER_SERVICE_ACCOUNT_ISSUER" \
  --service-account-key-file={{ kube_apiserver_config_path }}/service-account-key.pem \
  --service-account-signing-key-file={{ kube_apiserver_config_path }}/service-account-key.pem \
  --service-cluster-ip-range="$KUBE_APISERVER_SERVICE_CLUSTER_IP_RANGE" \
  --tls-cert-file={{ kube_apiserver_config_path }}/server.pem \
  --tls-private-key-file={{ kube_apiserver_config_path }}/server.key \
  --requestheader-client-ca-file={{ kube_apiserver_config_path }}/aggregation-layer-ca.pem \
  --proxy-client-cert-file={{ kube_apiserver_config_path }}/aggregation-layer.pem \
  --proxy-client-key-file={{ kube_apiserver_config_path }}/aggregation-layer.key \
  --v=2
