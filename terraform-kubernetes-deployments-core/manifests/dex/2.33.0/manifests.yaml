apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex
  namespace: dex
---
apiVersion: v1
data:
  config.yaml: |
    issuer: ${ oidc_provider_url }

    storage:
      type: kubernetes
      config:
        inCluster: true

    loger:
      level: debug

    web:
      http: 0.0.0.0:5556
      # tlsCert: /etc/dex/tls/tls.crt
      # tlsKey: /etc/dex/tls/tls.key

    oauth2:
      skipApprovalScreen: true

    connectors:
    - type: oidc
      id: oidc
      name: Default OIDC provider
      config:
        issuer: "${ oidc_issuer }"

        clientID: "${ oidc_client_id }"
        clientSecret: "${ oidc_client_secret }"

        redirectURI: ${ oidc_provider_url }/callback

        scopes:
        - user
        - groups
        userNameKey: username

        insecureEnableGroups: true

    staticClients:
      - id: kubectl
        name: Kubernetes CLI
        secret: kubectl-secret
        redirectURIs:
        - http://localhost:8000
        - http://localhost:8080/oauth2/callback
kind: ConfigMap
metadata:
  name: dex
  namespace: dex
---
apiVersion: v1
data:
  vault-ca.pem: ${ vault_cluster_ca_cert }
kind: Secret
metadata:
  name: vault-ca
  namespace: dex
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
  selector:
    app: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  replicas: 2
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: dex
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - /usr/local/bin/dex
        - serve
        - /etc/dex/cfg/config.yaml
        image: ghcr.io/dexidp/dex:v2.33.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTP
        name: dex
        ports:
        - containerPort: 5556
          name: http
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTP
        resources:
          limits:
            cpu: 50m
            memory: 16Mi
          requests:
            cpu: 50m
            memory: 16Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /etc/dex/cfg
          name: config
        - mountPath: /etc/dex/tls
          name: tls
        - mountPath: /etc/ssl/certs/
          name: vault-ca
      serviceAccountName: dex
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: dex
        name: config
      - name: tls
        secret:
          secretName: dex-cert
      - name: vault-ca
        secret:
          secretName: vault-ca
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: dex
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  name: dex
  namespace: dex
spec:
  ingressClassName: ${ dex_ingress_class_name }
  rules:
  - host: ${ dex_issuer_domain }
    http:
      paths:
      - backend:
          service:
            name: dex
            port:
              name: dex
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - ${ dex_issuer_domain }
    secretName: dex-cert
