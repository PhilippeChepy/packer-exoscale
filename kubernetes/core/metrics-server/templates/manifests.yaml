apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager-metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: system:aggregated-metrics-reader
rules:
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager-metrics-server-tokenreview-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: cert-manager-metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: cert-manager-metrics-server
  name: cert-manager-metrics-server-token
  namespace: kube-system
type: kubernetes.io/service-account-token
---
apiVersion: v1
data:
  aggregationlayer-server-ca.pem: '{{ .Values.platform.kubernetes.aggregationLayer.caCert
    | b64enc }}'
  kubelet-server-ca.pem: '{{ .Values.platform.kubernetes.kubelet.caCert | b64enc }}'
kind: Secret
metadata:
  name: metrics-server-ca
  namespace: kube-system
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    k8s-app: metrics-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: metrics-server
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: metrics-server
        rule.{{ .Values.platform.domain }}/allow-egress-api-server: "true"
        rule.{{ .Values.platform.domain }}/allow-egress-kubelet: "true"
        rule.{{ .Values.platform.domain }}/allow-ingress-api-server: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: metrics-server
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --kubelet-certificate-authority=/var/run/secrets/platform/ca/kubelet-server-ca.pem
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --kubelet-use-node-status-port
        - --metric-resolution=15s
        - --requestheader-client-ca-file=/var/run/secrets/platform/cert/ca.crt
        - --tls-cert-file=/var/run/secrets/platform/cert/tls.crt
        - --tls-private-key-file=/var/run/secrets/platform/cert/tls.key
        - --secure-port=4443
        image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          periodSeconds: 10
        name: metrics-server
        ports:
        - containerPort: 4443
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 100m
            memory: 32Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /var/run/secrets/platform/ca
          name: ca
        - mountPath: /var/run/secrets/platform/cert
          name: cert
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      serviceAccountName: metrics-server
      volumes:
      - name: ca
        secret:
          secretName: metrics-server-ca
      - name: cert
        secret:
          secretName: metrics-server-cert
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      k8s-app: metrics-server
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  labels:
    k8s-app: metrics-server
  name: v1beta1.metrics.k8s.io
spec:
  caBundle: '{{ .Values.platform.kubernetes.aggregationLayer.caCert | b64enc }}'
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  service:
    name: metrics-server
    namespace: kube-system
  version: v1beta1
  versionPriority: 100
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: metrics-server
  namespace: kube-system
spec:
  commonName: metrics-server.kube-system.svc
  dnsNames:
  - metrics-server.kube-system.svc
  duration: 24h0m0s
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: platform-deployment-metrics-server
  privateKey:
    algorithm: RSA
    rotationPolicy: Always
    size: 4096
  renewBefore: 12h0m0s
  secretName: metrics-server-cert
  subject:
    organizations:
    - metrics-server
  usages:
  - server auth
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: platform-deployment-metrics-server
  namespace: kube-system
spec:
  vault:
    auth:
      kubernetes:
        mountPath: /v1/auth/kubernetes/
        role: certificate-metrics-server
        secretRef:
          key: token
          name: cert-manager-metrics-server-token
    caBundle: '{{ .Values.platform.vault.caCert | b64enc }}'
    path: '{{ .Values.platform.vault.aggregationLayerPKIPath }}'
    server: '{{ .Values.platform.vault.baseUrl }}'
