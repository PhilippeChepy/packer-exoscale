---

- name: Ensure Local storage directory exists
  tags:
    - vault
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: "root"
    group: "root"
    mode: "0755"
  loop:
    - "{{ vault_local_storage }}"

- name: OS packages
  tags:
    - vault
  become: true
  ansible.builtin.package:
    name: ['unzip', 'acl']
    state: present
    update_cache: true

- name: Check Vault package checksum file
  tags:
    - vault
  ansible.builtin.stat:
    path: "{{ vault_local_storage }}/{{ vault_shasums }}"
  become: false
  register: vault_checksum

- name: Get Vault package checksum file
  tags:
    - vault
  ansible.builtin.get_url:
    url: "{{ vault_checksum_file_url }}"
    dest: "{{ vault_local_storage }}/{{ vault_shasums }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0666"
  when: not vault_checksum.stat.exists | bool

- name: Get Vault package checksum
  tags:
    - vault
    - skip_ansible_lint
  ansible.builtin.shell: |
    set -o pipefail
    grep "{{ vault_pkg }}" "{{ vault_local_storage }}/{{ vault_shasums }}" | awk '{print $1}'
  args:
    executable: /bin/bash
  changed_when: false
  become: false
  register: vault_sha256

- name: Check Vault package file
  tags:
    - vault
  ansible.builtin.stat:
    path: "{{ vault_local_storage }}/{{ vault_pkg }}"
  become: false
  register: vault_package

- name: "Download Vault → {{ vault_zip_url }}"
  tags:
    - vault
  ansible.builtin.get_url:
    url: "{{ vault_zip_url }}"
    dest: "{{ vault_local_storage }}/{{ vault_pkg }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0666"
    checksum: "sha256:{{ vault_sha256.stdout }}"
  when: not vault_package.stat.exists | bool

- name: Unarchive Vault
  tags:
    - vault
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ vault_local_storage }}/{{ vault_pkg }}"
    dest: "{{ vault_local_storage }}"
    creates: "{{ vault_local_storage }}/vault"

- name: Install Vault
  tags:
    - vault
  become: true
  ansible.builtin.copy:
    remote_src: true
    src: "{{ vault_local_storage }}/vault"
    dest: "{{ vault_bin_path }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"

- name: Check Vault mlock capability
  tags:
    - vault
  become: true
  ansible.builtin.command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  changed_when: false  # read-only task
  ignore_errors: true
  register: vault_mlock_capability

- name: Enable non root mlock capability
  tags:
    - vault
  become: true
  ansible.builtin.command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  when: vault_mlock_capability is failed

- name: Create directories
  tags:
    - vault
  become: true
  ansible.builtin.file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
  loop:
    - "{{ vault_config_path }}"
    - "{{ vault_plugin_path }}"
    - "{{ vault_data_path }}"
    - "{{ vault_log_path }}"
    - "{{ vault_run_path }}"

- name: Check Vault plugin
  tags:
    - vault
    - vault-plugin
  become: true
  become_user: "{{ vault_user }}"
  ansible.builtin.stat:
    path: "{{ vault_plugin_path }}/{{ item.name }}"
  register: vault_plugins_package
  loop: "{{ vault_external_plugins }}"

- name: "Download Vault plugin → {{ item.archive_url }}"
  tags:
    - vault
    - vault-plugin
  become: true
  become_user: "{{ vault_user }}"
  ansible.builtin.get_url:
    url: "{{ item.archive_url }}"
    dest: "{{ vault_plugin_path }}/archive-{{ item.name }}"
    checksum: "sha256:{{ item.archive_checksum }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0666"
  when: not vault_plugins_package.results[item_index].stat.exists | bool
  loop: "{{ vault_external_plugins }}"
  loop_control:
    index_var: item_index

- name: Unarchive Vault plugin
  tags:
    - vault
    - vault-plugin
  become: true
  become_user: "{{ vault_user }}"
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ vault_plugin_path }}/archive-{{ item.name }}"
    dest: "{{ vault_plugin_path }}"
    include:
      - "{{ item.name }}"
    creates: "{{ vault_local_storage }}/{{ item.name }}"
  when: not vault_plugins_package.results[item_index].stat.exists | bool
  loop: "{{ vault_external_plugins }}"
  loop_control:
    index_var: item_index

- name: "Delete archive → {{ item.name }}"
  tags:
    - vault
    - vault-plugin
  become: true
  become_user: "{{ vault_user }}"
  ansible.builtin.file:
    state: absent
    dest: "{{ vault_plugin_path }}/archive-{{ item.name }}"
  when: not vault_plugins_package.results[item_index].stat.exists | bool
  loop: "{{ vault_external_plugins }}"
  loop_control:
    index_var: item_index
