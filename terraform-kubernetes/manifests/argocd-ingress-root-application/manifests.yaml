%{~ for _, ingress in argocd_ingress }
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: root-application-${ ingress.name }
spec:
  destination:
    name: ''
    namespace: argocd
    server: 'https://kubernetes.default.svc'
  source:
    path: "${ ingress.root_application_path }"
    repoURL: "${ ingress.root_application_repository }"
    targetRevision: "${ ingress.root_application_revision }"
    helm:
      parameters:
        - name: core.projectName
          value: "platform-${ ingress.name }"
        - name: deployment.certManagerDns01Cloudflare.path
          value: "${ ingress.deployment_cert_manager_dns01_cloudflare_path }"
        - name: deployment.certManagerDns01Cloudflare.repoURL
          value: "${ ingress.deployment_cert_manager_dns01_cloudflare_repository }"
        - name: deployment.certManagerDns01Cloudflare.targetRevision
          value: "${ ingress.deployment_cert_manager_dns01_cloudflare_revision }"
        - name: deployment.certManagerDns01Cloudflare.selfHeal
          value: "${ ingress.deployment_cert_manager_dns01_cloudflare_self_heal }"
        - name: deployment.externalDnsCloudflare.path
          value: "${ ingress.deployment_external_dns_cloudflare_path }"
        - name: deployment.externalDnsCloudflare.repoURL
          value: "${ ingress.deployment_external_dns_cloudflare_repository }"
        - name: deployment.externalDnsCloudflare.targetRevision
          value: "${ ingress.deployment_external_dns_cloudflare_revision }"
        - name: deployment.externalDnsCloudflare.selfHeal
          value: "${ ingress.deployment_external_dns_cloudflare_self_heal }"
        - name: deployment.certMmanagerHttp01.path
          value: "${ ingress.deployment_cert_mmanager_http01_path }"
        - name: deployment.certMmanagerHttp01.repoURL
          value: "${ ingress.deployment_cert_mmanager_http01_repository }"
        - name: deployment.certMmanagerHttp01.targetRevision
          value: "${ ingress.deployment_cert_mmanager_http01_revision }"
        - name: deployment.certMmanagerHttp01.selfHeal
          value: "${ ingress.deployment_cert_mmanager_http01_self_heal }"
        - name: deployment.certManagerSelfsigned.path
          value: "${ ingress.deployment_cert_manager_selfsigned_path }"
        - name: deployment.certManagerSelfsigned.repoURL
          value: "${ ingress.deployment_cert_manager_selfsigned_repository }"
        - name: deployment.certManagerSelfsigned.targetRevision
          value: "${ ingress.deployment_cert_manager_selfsigned_revision }"
        - name: deployment.certManagerSelfsigned.selfHeal
          value: "${ ingress.deployment_cert_manager_selfsigned_self_heal }"
        - name: deployment.nginxIngressController.path
          value: "${ ingress.deployment_nginx_ingress_controller_path }"
        - name: deployment.nginxIngressController.repoURL
          value: "${ ingress.deployment_nginx_ingress_controller_repository }"
        - name: deployment.nginxIngressController.targetRevision
          value: "${ ingress.deployment_nginx_ingress_controller_revision }"
        - name: deployment.nginxIngressController.selfHeal
          value: "${ ingress.deployment_nginx_ingress_controller_self_heal }"
        - name: platform.domain
          value: "${ ingress.platform_domain }"
        - name: platform.ingress.name
          value: "${ ingress.name }"
        - name: platform.ingress.domain
          value: "${ ingress.platform_ingress_domain }"
        - name: platform.ingress.cloudflare.apiToken
          value: "${ ingress.platform_ingress_cloudflare_api_token }"
        - name: platform.ingress.loadbalancerIP
          value: "${ ingress.platform_ingress_loadbalancer_ip }"
        - name: platform.ingress.label.name
          value: "${ ingress.platform_ingress_label_name }"
        - name: platform.ingress.label.value
          value: "${ ingress.platform_ingress_label_value }"
        - name: platform.ingress.taint.name
          value: "${ ingress.platform_ingress_taint_name }"
        - name: platform.ingress.taint.value
          value: "${ ingress.platform_ingress_taint_value }"
  project: "platform-${ ingress.name }"
  syncPolicy:
    automated:
      prune: false
      selfHeal: true
%{~ endfor }
%{~ for _, ingress in argocd_ingress }
---
apiVersion: v1
data:
  project: "${ base64encode("platform-${ ingress.name }") }"
%{~ if length(ingress.ssh_deploy_key) > 0 }
  sshPrivateKey: "${ base64encode(ingress.ssh_deploy_key) }"
%{~ endif }
  type: "${ base64encode("git") }"
  url: "${ base64encode(ingress.root_application_repository) }"
kind: Secret
metadata:
  annotations:
    managed-by: argocd.argoproj.io
  labels:
    argocd.argoproj.io/secret-type: repository
  name: repo-platform-${ ingress.name }
  namespace: argocd
type: Opaque
%{~ endfor }
